import React, { useState, useRef, useEffect, useCallback } from 'react';

// --- Color Conversion Helpers ---
/**
 * Converts an RGB color value to HSL. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes r, g, and b are contained in the set [0, 255] and
 * returns h, s, and l in the set [0, 1].
 *
 * @param   Number  r       The red color value
 * @param   Number  g       The green color value
 * @param   Number  b       The blue color value
 * @return  Array           The HSL representation
 */
function rgbToHsl(r, g, b) {
  r /= 255; g /= 255; b /= 255;
  let max = Math.max(r, g, b), min = Math.min(r, g, b);
  let h, s, l = (max + min) / 2;

  if (max === min) {
    h = s = 0; // achromatic
  } else {
    let d = max - min;
    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
    switch (max) {
      case r: h = (g - b) / d + (g < b ? 6 : 0); break;
      case g: h = (b - r) / d + 2; break;
      case b: h = (r - g) / d + 4; break;
    }
    h /= 6;
  }
  return [h, s, l];
}

/**
 * Converts an HSL color value to RGB. Conversion formula
 * adapted from http://en.wikipedia.org/wiki/HSL_color_space.
 * Assumes h, s, and l are contained in the set [0, 1] and
 * returns r, g, and b in the set [0, 255].
 *
 * @param   Number  h       The hue
 * @param   Number  s       The saturation
 * @param   Number  l       The lightness
 * @return  Array           The RGB representation
 */
function hslToRgb(h, s, l) {
  let r, g, b;

  if (s === 0) {
    r = g = b = l; // achromatic
  } else {
    const hue2rgb = (p, q, t) => {
      if (t < 0) t += 1;
      if (t > 1) t -= 1;
      if (t < 1 / 6) return p + (q - p) * 6 * t;
      if (t < 1 / 2) return q;
      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
      return p;
    };
    let q = l < 0.5 ? l * (1 + s) : l + s - l * s;
    let p = 2 * l - q;
    r = hue2rgb(p, q, h + 1 / 3);
    g = hue2rgb(p, q, h);
    b = hue2rgb(p, q, h - 1 / 3);
  }
  return { r: r * 255, g: g * 255, b: b * 255 };
}


// Main App Component
const App = () => {
    // State for uploaded images
    const [renderImage, setRenderImage] = useState(null);
    const [maskImage, setMaskImage] = useState(null);
    const [referenceImage, setReferenceImage] = useState(null);

    // State for colors and selections
    const [selectedMaskColors, setSelectedMaskColors] = useState([]);
    const [avgReferenceColor, setAvgReferenceColor] = useState(null);
    const [avgSelectedAreaColor, setAvgSelectedAreaColor] = useState(null);

    // State for UI and processing
    const [hoveredColor, setHoveredColor] = useState(null);
    const [highlightedPixels, setHighlightedPixels] = useState(null);
    const [isProcessing, setIsProcessing] = useState(false);
    const [errorMessage, setErrorMessage] = useState('');

    // State for adjustment controls
    const [opacity, setOpacity] = useState(100);
    const [brightness, setBrightness] = useState(0);
    const [contrast, setContrast] = useState(100);
    const [expandMask, setExpandMask] = useState(0);
    const [smoothEdge, setSmoothEdge] = useState(0);
    const [hue, setHue] = useState(0);
    const [saturation, setSaturation] = useState(100);
    const [vibrance, setVibrance] = useState(0);


    // Refs for canvases
    const renderCanvasRef = useRef(null);
    const maskCanvasRef = useRef(null);
    const referenceCanvasRef = useRef(null);
    const finalCanvasRef = useRef(null);
    const highlightCanvasRef = useRef(null);
    const previewCanvasRef = useRef(null);
    const processedMaskPreviewCanvasRef = useRef(null);

    const MASK_TOLERANCE = 10;

    // Utility to draw an image onto a canvas
    const drawImageToCanvas = (imageSrc, canvasRef) => {
        return new Promise((resolve, reject) => {
            const canvas = canvasRef.current;
            if (!canvas) return reject('Canvas element not found.');
            const ctx = canvas.getContext('2d', { willReadFrequently: true });
            const img = new Image();
            img.crossOrigin = "Anonymous";
            img.onload = () => {
                canvas.width = img.width;
                canvas.height = img.height;
                ctx.drawImage(img, 0, 0);
                resolve({ width: img.width, height: img.height });
            };
            img.onerror = () => reject('Failed to load image.');
            img.src = imageSrc;
        });
    };
    
    // Handlers for file uploads
    const handleImageUpload = (setter) => (e) => {
        const file = e.target.files[0];
        if (!file) return;
        const reader = new FileReader();
        reader.onload = (event) => setter(event.target.result);
        reader.onerror = () => setErrorMessage("Error reading file.");
        reader.readAsDataURL(file);
    };

    // --- useEffect Hooks for drawing images ---
    useEffect(() => {
        if (renderImage) drawImageToCanvas(renderImage, renderCanvasRef).catch(err => setErrorMessage(err.toString()));
    }, [renderImage]);

    useEffect(() => {
        if (maskImage && renderCanvasRef.current?.width) {
            drawImageToCanvas(maskImage, maskCanvasRef)
                .then(dims => {
                    const renderCanvas = renderCanvasRef.current;
                    if (renderCanvas.width !== dims.width || renderCanvas.height !== dims.height) {
                        setErrorMessage("Error: Render and Mask dimensions must be identical.");
                        setMaskImage(null);
                    } else {
                        setErrorMessage('');
                    }
                })
                .catch(err => setErrorMessage(err.toString()));
        }
    }, [maskImage, renderImage]);

    useEffect(() => {
        if (referenceImage) {
            drawImageToCanvas(referenceImage, referenceCanvasRef)
                .then(() => setAvgReferenceColor(calculateAverageColor(referenceCanvasRef)))
                .catch(err => setErrorMessage(err.toString()));
        }
    }, [referenceImage]);

    // Calculate average color of a canvas area
    const calculateAverageColor = (canvasRef) => {
        const canvas = canvasRef.current;
        if (!canvas || !canvas.width) return null;
        const ctx = canvas.getContext('2d');
        const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
        const data = imageData.data;
        let r = 0, g = 0, b = 0, count = 0;
        for (let i = 0; i < data.length; i += 4) {
            if (data[i+3] > 0) {
               r += data[i]; g += data[i + 1]; b += data[i + 2];
               count++;
            }
        }
        return count > 0 ? { r: Math.round(r / count), g: Math.round(g / count), b: Math.round(b / count) } : null;
    };

    // Color similarity check
    const colorsAreSimilar = (c1, c2, tolerance) => {
        if (!c1 || !c2) return false;
        return Math.abs(c1.r - c2.r) <= tolerance && Math.abs(c1.g - c2.g) <= tolerance && Math.abs(c1.b - c2.b) <= tolerance;
    };

    // Find and highlight matching pixels based on selection
    const findAndHighlightMatchingPixels = useCallback(() => {
        if (!maskImage || selectedMaskColors.length === 0 || !renderImage) {
            const highlightCanvas = highlightCanvasRef.current;
            if (highlightCanvas?.width > 0) {
                highlightCanvas.getContext('2d').clearRect(0, 0, highlightCanvas.width, highlightCanvas.height);
            }
            setHighlightedPixels(null);
            setAvgSelectedAreaColor(null);
            return;
        }

        const maskCanvas = maskCanvasRef.current;
        const renderCanvas = renderCanvasRef.current;
        const highlightCanvas = highlightCanvasRef.current;
        highlightCanvas.width = renderCanvas.width;
        highlightCanvas.height = renderCanvas.height;

        const maskCtx = maskCanvas.getContext('2d');
        const highlightCtx = highlightCanvas.getContext('2d');
        const maskImageData = maskCtx.getImageData(0, 0, maskCanvas.width, maskCanvas.height);
        const highlightImageData = highlightCtx.createImageData(maskCanvas.width, maskCanvas.height);
        const maskData = maskImageData.data;
        const highlightData = highlightImageData.data;

        let totalR = 0, totalG = 0, totalB = 0, pixelCount = 0;
        const renderCtx = renderCanvas.getContext('2d');
        const renderImageData = renderCtx.getImageData(0, 0, renderCanvas.width, renderCanvas.height);
        const renderData = renderImageData.data;

        for (let i = 0; i < maskData.length; i += 4) {
            const currentMaskColor = { r: maskData[i], g: maskData[i + 1], b: maskData[i + 2] };
            if (selectedMaskColors.some(selColor => colorsAreSimilar(currentMaskColor, selColor, MASK_TOLERANCE))) {
                highlightData[i] = 255; highlightData[i + 1] = 0; highlightData[i + 2] = 255; highlightData[i + 3] = 255;
                totalR += renderData[i]; totalG += renderData[i + 1]; totalB += renderData[i + 2];
                pixelCount++;
            }
        }
        
        const interactiveHighlightData = highlightCtx.createImageData(renderCanvas.width, renderCanvas.height);
        for(let i=0; i < highlightData.length; i+=4) {
             if (highlightData[i+3] > 0) {
                interactiveHighlightData.data[i] = 255;
                interactiveHighlightData.data[i+1] = 0;
                interactiveHighlightData.data[i+2] = 255;
                interactiveHighlightData.data[i+3] = 100;
             }
        }
        highlightCtx.putImageData(interactiveHighlightData, 0, 0);

        setHighlightedPixels(highlightImageData);
        if (pixelCount > 0) {
            setAvgSelectedAreaColor({ r: Math.round(totalR / pixelCount), g: Math.round(totalG / pixelCount), b: Math.round(totalB / pixelCount) });
        } else {
            setAvgSelectedAreaColor(null);
        }
    }, [maskImage, selectedMaskColors, renderImage]);

    useEffect(() => {
        findAndHighlightMatchingPixels();
    }, [selectedMaskColors, findAndHighlightMatchingPixels]);
    
    // Mouse handlers for interactive preview
    const handlePreviewMouseMove = (e) => {
        if (!maskCanvasRef.current || !maskImage) return;
        const maskCanvas = maskCanvasRef.current;
        const rect = e.currentTarget.getBoundingClientRect();
        const scaleX = maskCanvas.width / rect.width;
        const scaleY = maskCanvas.height / rect.height;
        const x = (e.clientX - rect.left) * scaleX;
        const y = (e.clientY - rect.top) * scaleY;
        const pixel = maskCanvas.getContext('2d').getImageData(x, y, 1, 1).data;
        setHoveredColor({ r: pixel[0], g: pixel[1], b: pixel[2] });
    };

    const handlePreviewMouseClick = () => {
        if (!maskImage || !hoveredColor) return;
        const isSelected = selectedMaskColors.some(c => colorsAreSimilar(c, hoveredColor, MASK_TOLERANCE));
        if (isSelected) {
            setSelectedMaskColors(prev => prev.filter(c => !colorsAreSimilar(c, hoveredColor, MASK_TOLERANCE)));
        } else {
            setSelectedMaskColors(prev => [...prev, hoveredColor]);
        }
    };

    // Manual pixel-based mask processing function
    const processMask = (sourceImageData, expand, smooth) => {
        if (!sourceImageData) return null;
        const w = sourceImageData.width;
        const h = sourceImageData.height;
        let srcData = sourceImageData.data;
        
        if (expand !== 0) {
            const tempImageData = new ImageData(w, h);
            const tempData = tempImageData.data;
            const radius = Math.abs(expand);
            const isDilation = expand > 0;

            for (let y = 0; y < h; y++) {
                for (let x = 0; x < w; x++) {
                    const i = (y * w + x) * 4;
                    let hit = false;
                    
                    if (isDilation) {
                        for (let ky = -radius; ky <= radius; ky++) {
                            for (let kx = -radius; kx <= radius; kx++) {
                                const nx = x + kx;
                                const ny = y + ky;
                                if (nx >= 0 && nx < w && ny >= 0 && ny < h) {
                                    const ni = (ny * w + nx) * 4;
                                    if (srcData[ni + 3] > 0) { hit = true; break; }
                                }
                            }
                            if (hit) break;
                        }
                        if (hit) { tempData[i] = 255; tempData[i+1] = 0; tempData[i+2] = 255; tempData[i+3] = 255; }
                    } else {
                        hit = true;
                        for (let ky = -radius; ky <= radius; ky++) {
                            for (let kx = -radius; kx <= radius; kx++) {
                                const nx = x + kx;
                                const ny = y + ky;
                                if (nx >= 0 && nx < w && ny >= 0 && ny < h) {
                                    const ni = (ny * w + nx) * 4;
                                    if (srcData[ni + 3] === 0) { hit = false; break; }
                                } else { hit = false; break; }
                            }
                            if (!hit) break;
                        }
                        if (hit) { tempData[i] = 255; tempData[i+1] = 0; tempData[i+2] = 255; tempData[i+3] = 255; }
                    }
                }
            }
            srcData = tempData;
        }
        
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        tempCanvas.width = w;
        tempCanvas.height = h;
        tempCtx.putImageData(new ImageData(srcData, w, h), 0, 0);

        if (smooth > 0) {
            tempCtx.filter = `blur(${smooth}px)`;
            tempCtx.drawImage(tempCanvas, 0, 0);
        }

        return tempCtx.getImageData(0, 0, w, h);
    };

    // Effect to update the dedicated mask preview
    useEffect(() => {
        const canvas = processedMaskPreviewCanvasRef.current;
        if (!canvas) return;
        const ctx = canvas.getContext('2d');
        if (!highlightedPixels) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            return;
        }
        canvas.width = highlightedPixels.width;
        canvas.height = highlightedPixels.height;
        const processedMask = processMask(highlightedPixels, expandMask, smoothEdge);
        if (processedMask) {
            ctx.putImageData(processedMask, 0, 0);
        }
    }, [highlightedPixels, expandMask, smoothEdge]);


    // Core logic to apply color correction to a target canvas
    const applyCorrection = useCallback((targetCanvas) => {
        const renderCanvas = renderCanvasRef.current;
        if (!targetCanvas || !renderCanvas) return;

        targetCanvas.width = renderCanvas.width;
        targetCanvas.height = renderCanvas.height;
        const targetCtx = targetCanvas.getContext('2d');
        targetCtx.drawImage(renderCanvas, 0, 0);

        if (!highlightedPixels || !avgSelectedAreaColor || !avgReferenceColor) {
            return;
        }

        const targetImageData = targetCtx.getImageData(0, 0, renderCanvas.width, renderCanvas.height);
        const targetData = targetImageData.data;
        const processedMask = processMask(highlightedPixels, expandMask, smoothEdge);
        const processedMaskData = processedMask.data;

        const contrastFactor = contrast / 100;
        const deltaR = (avgReferenceColor.r - avgSelectedAreaColor.r);
        const deltaG = (avgReferenceColor.g - avgSelectedAreaColor.g);
        const deltaB = (avgReferenceColor.b - avgSelectedAreaColor.b);

        for (let i = 0; i < targetData.length; i += 4) {
            const maskAlpha = processedMaskData[i + 3] / 255;
            if (maskAlpha > 0) {
                const originalR = targetData[i];
                const originalG = targetData[i + 1];
                const originalB = targetData[i + 2];

                // 1. Apply base color correction + brightness
                let newR = originalR + deltaR + brightness;
                let newG = originalG + deltaG + brightness;
                let newB = originalB + deltaB + brightness;

                // 2. Apply contrast
                newR = (newR - 128) * contrastFactor + 128;
                newG = (newG - 128) * contrastFactor + 128;
                newB = (newB - 128) * contrastFactor + 128;

                // 3. Convert to HSL for Hue/Saturation/Vibrance adjustments
                let [h, s, l] = rgbToHsl(newR, newG, newB);

                // Apply Hue
                h += hue / 360;
                if (h < 0) h += 1;
                if (h > 1) h -= 1;

                // Apply Vibrance
                const vib = vibrance / 100;
                if (vib !== 0) {
                    const saturationBoost = (1 - s) * vib;
                    s += saturationBoost;
                }
                
                // Apply Saturation
                s *= saturation / 100;
                
                // Clamp saturation
                s = Math.max(0, Math.min(1, s));
                
                // 4. Convert back to RGB
                const finalRgb = hslToRgb(h, s, l);
                newR = finalRgb.r;
                newG = finalRgb.g;
                newB = finalRgb.b;

                // 5. Blend based on opacity and mask alpha
                const blendFactor = (opacity / 100) * maskAlpha;
                targetData[i] = originalR * (1 - blendFactor) + newR * blendFactor;
                targetData[i + 1] = originalG * (1 - blendFactor) + newG * blendFactor;
                targetData[i + 2] = originalB * (1 - blendFactor) + newB * blendFactor;
            }
        }
        
        targetCtx.putImageData(targetImageData, 0, 0);
    }, [highlightedPixels, avgSelectedAreaColor, avgReferenceColor, opacity, brightness, contrast, expandMask, smoothEdge, hue, saturation, vibrance]);


    // Effect to update the live final preview
    useEffect(() => {
        applyCorrection(previewCanvasRef.current);
    }, [applyCorrection, renderImage]);


    // Generate and download the final image
    const handleGenerate = () => {
        setIsProcessing(true);
        setErrorMessage('');
        setTimeout(() => {
            try {
                applyCorrection(finalCanvasRef.current);
                const link = document.createElement('a');
                link.download = 'color-corrected-render.png';
                link.href = finalCanvasRef.current.toDataURL('image/png');
                link.click();
            } catch(err) {
                setErrorMessage("An error occurred during generation: " + err.message);
            } finally {
                setIsProcessing(false);
            }
        }, 100);
    };

    // UI Components
    const UploadStep = ({ title, onUpload, imageSrc, disabled, children }) => (
        <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
            <h3 className="text-lg font-semibold text-cyan-400 mb-3">{title}</h3>
            <div className="flex flex-col sm:flex-row gap-4 items-start">
                <div className="flex-1 w-full">
                    <label className={`relative block w-full h-32 rounded-md border-2 border-dashed border-gray-500 text-center flex justify-center items-center transition-colors ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer hover:border-cyan-400'}`}>
                        <span className="text-gray-400">{imageSrc ? 'Click to change' : 'Click to upload'}</span>
                        <input type="file" accept="image/png, image/jpeg" className="absolute inset-0 w-full h-full opacity-0 disabled:cursor-not-allowed" onChange={onUpload} disabled={disabled} />
                    </label>
                </div>
                {imageSrc && <div className="flex-shrink-0 w-full sm:w-32 h-32 bg-gray-900 rounded-md overflow-hidden"><img src={imageSrc} alt="Upload preview" className="w-full h-full object-cover" /></div>}
            </div>
            {children}
        </div>
    );
    
    const ColorSwatch = ({ color, label }) => {
        if (!color) return null;
        const rgbString = `rgb(${color.r}, ${color.g}, ${color.b})`;
        return <div className="flex items-center gap-2 text-sm"><div className="w-5 h-5 rounded border border-gray-500" style={{ backgroundColor: rgbString }}></div><span>{label}: {rgbString}</span></div>;
    };

    const AdjustmentSlider = ({ label, value, onChange, min, max, step = 1, unit = '' }) => (
        <div>
            <label className="flex justify-between items-center text-sm font-medium text-gray-300">
                <span>{label}</span>
                <span className="text-cyan-400 font-mono">{value}{unit}</span>
            </label>
            <input type="range" min={min} max={max} step={step} value={value} onChange={e => onChange(parseFloat(e.target.value))} className="w-full h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer accent-cyan-500 mt-1" />
        </div>
    );

    return (
        <div className="bg-gray-900 text-gray-200 min-h-screen font-sans">
            <div className="container mx-auto p-4 sm:p-6 lg:p-8">
                <header className="text-center mb-8"><h1 className="text-4xl font-bold text-white">Color Correction Tool</h1><p className="text-gray-400 mt-2">For Perspective Renders</p></header>
                {errorMessage && <div className="bg-red-500/20 border border-red-500 text-red-300 px-4 py-3 rounded-lg mb-6 text-center">{errorMessage}</div>}

                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div className="flex flex-col gap-6">
                        {/* --- UPLOAD STEPS --- */}
                        <UploadStep title="1. Upload Perspective Render" onUpload={handleImageUpload(setRenderImage)} imageSrc={renderImage} />
                        <UploadStep title="2. Upload & Refine Mask" onUpload={handleImageUpload(setMaskImage)} imageSrc={maskImage} disabled={!renderImage}>
                            {maskImage && (
                                <div className="mt-4 space-y-4">
                                    <div className="p-3 bg-gray-700/50 rounded-md space-y-2">
                                        <p className="text-sm text-gray-300">Click on the render preview to select/deselect materials.</p>
                                        <ColorSwatch color={hoveredColor} label="Hovering" />
                                        <div>
                                            <span className="text-sm font-semibold">Selected:</span>
                                            {selectedMaskColors.length > 0 ? <div className="flex flex-wrap gap-2 mt-1">{selectedMaskColors.map((c, i) => <div key={i} className="w-5 h-5 rounded border border-gray-500" style={{ backgroundColor: `rgb(${c.r}, ${c.g}, ${c.b})` }}></div>)}</div> : <span className="text-sm text-gray-400 ml-2">None</span>}
                                        </div>
                                    </div>
                                    <div className="p-3 bg-gray-700/50 rounded-md space-y-4">
                                        <AdjustmentSlider label="Expand Mask" value={expandMask} onChange={setExpandMask} min={-10} max={10} unit="px" />
                                        <AdjustmentSlider label="Smooth Edge" value={smoothEdge} onChange={setSmoothEdge} min={0} max={10} unit="px" />
                                        <h4 className="text-sm font-semibold text-gray-300 pt-2">Processed Mask Preview:</h4>
                                        <div className="relative w-full aspect-video bg-gray-900 rounded-md overflow-hidden border border-gray-600">
                                            <canvas ref={processedMaskPreviewCanvasRef} className="w-full h-full object-contain" />
                                        </div>
                                    </div>
                                </div>
                            )}
                        </UploadStep>
                        <UploadStep title="3. Upload Reference Image" onUpload={handleImageUpload(setReferenceImage)} imageSrc={referenceImage} disabled={selectedMaskColors.length === 0}>
                             {selectedMaskColors.length === 0 && maskImage && <div className="mt-3 text-sm text-yellow-400/80"><p>Please select one or more materials from the render preview.</p></div>}
                             {avgReferenceColor && (
                                <div className="mt-4 p-3 bg-gray-700/50 rounded-md space-y-2">
                                    <ColorSwatch color={avgReferenceColor} label="Avg. Reference" />
                                    <ColorSwatch color={avgSelectedAreaColor} label="Avg. Selected Area" />
                                </div>
                             )}
                        </UploadStep>

                        {/* --- ADJUSTMENT CONTROLS --- */}
                        <div className="bg-gray-800 p-4 rounded-lg border border-gray-700 space-y-4">
                            <h3 className="text-lg font-semibold text-cyan-400 mb-2">4. Blend Adjustments</h3>
                            <AdjustmentSlider label="Opacity" value={opacity} onChange={setOpacity} min={0} max={100} unit="%" />
                            <AdjustmentSlider label="Brightness" value={brightness} onChange={setBrightness} min={-100} max={100} />
                            <AdjustmentSlider label="Contrast" value={contrast} onChange={setContrast} min={0} max={200} unit="%" />
                            <AdjustmentSlider label="Hue" value={hue} onChange={setHue} min={-180} max={180} unit="°" />
                            <AdjustmentSlider label="Saturation" value={saturation} onChange={setSaturation} min={0} max={200} unit="%" />
                            <AdjustmentSlider label="Vibrance" value={vibrance} onChange={setVibrance} min={-100} max={100} />
                        </div>

                        <div className="mt-4">
                            <button onClick={handleGenerate} disabled={isProcessing || !renderImage || !maskImage || !referenceImage || selectedMaskColors.length === 0} className="w-full bg-cyan-500 hover:bg-cyan-600 disabled:bg-gray-600 disabled:cursor-not-allowed text-white font-bold py-3 px-4 rounded-lg transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-opacity-75">
                                {isProcessing ? 'Processing...' : '5. Generate & Download Image'}
                            </button>
                        </div>
                    </div>

                    <div className="flex flex-col gap-6">
                        {/* --- PREVIEW PANELS --- */}
                        <div className="bg-gray-800 p-4 rounded-lg border border-gray-700 flex-1 flex flex-col">
                           <h3 className="text-lg font-semibold text-cyan-400 mb-3">Interactive Preview</h3>
                           <div className={`relative w-full aspect-video bg-gray-900 rounded-md overflow-hidden ${maskImage ? 'cursor-crosshair' : ''}`} onMouseMove={maskImage ? handlePreviewMouseMove : undefined} onClick={maskImage ? handlePreviewMouseClick : undefined} onMouseLeave={maskImage ? () => setHoveredColor(null) : undefined}>
                                {renderImage ? (<><canvas ref={renderCanvasRef} className="absolute inset-0 w-full h-full" /><canvas ref={highlightCanvasRef} className="absolute inset-0 w-full h-full opacity-70 pointer-events-none" /></>) : <div className="flex items-center justify-center h-full text-gray-500">Render will appear here</div>}
                           </div>
                        </div>
                         <div className="bg-gray-800 p-4 rounded-lg border border-gray-700">
                           <h3 className="text-lg font-semibold text-cyan-400 mb-3">Final Preview</h3>
                           <div className="relative w-full aspect-video bg-gray-900 rounded-md overflow-hidden">
                                <canvas ref={previewCanvasRef} className="w-full h-full object-contain" />
                                {!renderImage && <div className="absolute inset-0 flex items-center justify-center h-full text-gray-500">Corrected image will appear here</div>}
                           </div>
                        </div>
                    </div>
                </div>

                <div className="hidden">
                    <canvas ref={maskCanvasRef}></canvas><canvas ref={referenceCanvasRef}></canvas><canvas ref={finalCanvasRef}></canvas>
                </div>
            </div>
        </div>
    );
};

export default App;
